from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from database.crud import CrudUser, CrudWithdrawal
from telegram_bot.states.state import WithdrawStates

router = Router()


@router.callback_query(F.data == 'referral_withdraw')
async def start_withdraw(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:")
    await state.set_state(WithdrawStates.waiting_for_amount)
    await callback.answer()


@router.message(WithdrawStates.waiting_for_amount)
async def process_withdraw_amount(message: Message, state: FSMContext):
    crud_user = CrudUser()

    try:
        amount = float(message.text.replace(',', '.'))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        user = await crud_user.get_user_by_id(message.from_user.id)
        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if amount > user.referral_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.referral_balance}</b>")
            return

        await state.update_data(amount=amount)
        await message.answer("üí≥ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ó–û–ù-–ë–∞–Ω–∫, –°–±–µ—Ä–ë–∞–Ω–∫, –¢-–ë–ê–ù–ö, –ú–∏—Ä):")
        await state.set_state(WithdrawStates.waiting_for_card_type)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <b>150.75</b>")


@router.message(WithdrawStates.waiting_for_card_type)
async def process_card_type(message: Message, state: FSMContext):
    card_type = message.text.strip()

    if not card_type or len(card_type) < 3:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã.")
        return

    await state.update_data(card_type=card_type)
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):")
    await state.set_state(WithdrawStates.waiting_for_card_number)


@router.message(WithdrawStates.waiting_for_card_number)
async def process_card_number(message: Message, state: FSMContext):
    card_number = message.text.strip().replace(' ', '')

    if not card_number.isdigit() or len(card_number) != 16:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(card_number=card_number)
    data = await state.get_data()

    crud_user = CrudUser()
    crud_withdrawal = CrudWithdrawal()

    user = await crud_user.get_user_by_id(message.from_user.id)
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    success = await crud_withdrawal.create_withdrawal(
        telegram_id=user.telegram_id,
        username=user.username or message.from_user.username,
        amount=data['amount'],
        card_type=data['card_type'],
        card_number=data['card_number']
    )

    if not success:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    else:
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{data['amount']}</b> ‚ÇΩ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: {data['card_type']} {data['card_number']}\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        )

    await state.clear()
