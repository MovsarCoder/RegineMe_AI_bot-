from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.crud import CrudUser
from telegram_bot.states.state import NewsLetter
from telegram_bot.keyboard.keyboards import cancel_newsletter, admin_keyboard
from telegram_bot.keyboard.keyboard_builder import make_row_inline_keyboards

router = Router()


@router.callback_query(F.data == "broadcast_message")
async def handle_broadcast_button(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=make_row_inline_keyboards(cancel_newsletter),
    )
    await state.set_state(NewsLetter.text)


@router.message(NewsLetter.text, F.content_type.in_({"text", "photo", "video", "document"}))
async def send_broadcast(message: Message, state: FSMContext):
    users = await CrudUser().get_all_telegram_ids()

    if not users:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        return

    await message.answer(f"üë• –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    success = 0
    failed = 0
    failed_users = []

    for user_id in users:
        try:
            if message.text:
                await message.bot.send_message(chat_id=user_id, text=message.text)
            elif message.photo:
                await message.bot.send_photo(chat_id=user_id, photo=message.photo[-1].file_id, caption=message.caption or "")
            elif message.video:
                await message.bot.send_video(chat_id=user_id, video=message.video.file_id, caption=message.caption or "")
            elif message.document:
                await message.bot.send_document(chat_id=user_id, document=message.document.file_id, caption=message.caption or "")
            success += 1
        except Exception as e:
            failed += 1
            failed_users.append(str(user_id))
            continue

    text_result = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {len(users)}\n"
        f"üì¨ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {failed}"
    )

    if failed_users:
        text_result += f"\n\nüö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å:\n" + "\n".join(failed_users[:10])
        if len(failed_users) > 10:
            text_result += f"\n...–∏ –µ—â—ë {len(failed_users) - 10}."

    await message.answer(text_result, reply_markup=make_row_inline_keyboards(admin_keyboard))
    await state.clear()


@router.callback_query(F.data == 'cancel_newsletter')
async def cancel_sending_photo(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", reply_markup=make_row_inline_keyboards(admin_keyboard))
    await callback.answer()
