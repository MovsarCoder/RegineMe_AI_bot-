from aiogram.types import TelegramObject, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any

from database.crud import CrudGroup, CrudUser


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()
        self.crud_group = CrudGroup()
        self.crud_user = CrudUser()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, Message):
            user_id = event.from_user.id
            bot = data['bot']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
            groups = await self.crud_group.get_all_groups()
            not_subscribed = []

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—É–¥–µ—Ç.
            if event.from_user.id in await self.crud_user.check_is_admin_user():
                return await handler(event, data)

            for group in groups:
                try:
                    member = await bot.get_chat_member(chat_id=f"@{group.group_username}", user_id=user_id)
                    if member.status not in ['member', 'creator', 'administrator']:
                        not_subscribed.append(group)
                except Exception as e:
                    print(f"[Middleware Error] {e}")
                    continue

            if not_subscribed:
                keyboard = [
                    [InlineKeyboardButton(text=g.group_name, url=f"https://t.me/{g.group_username}")]
                    for g in not_subscribed
                ]

                await event.answer(
                    "üì¢ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

            return await handler(event, data)
